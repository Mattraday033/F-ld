using System.Collections;
using System.Collections.Generic;
using System.IO;
using System;
using UnityEngine;
using UnityEngine.UI;
using Ink.Runtime;
using System.Linq;

public enum PrimaryStat{Strength = 0, Dexterity = 1, Wisdom = 2, Charisma = 3, None = 4}

public class PlayerStats : PartyMemberStats
{
	public const int xpNeededToLevelUp = 1000;

	public const string playerCombatSpriteName = "PlayerSprite";

	private const int baseNumberOfPartyMembers = 2;
	private const int maxNumberOfPartyMembers = 16;
	private const int baseNumberOfPartyCombatActionPoints = 5;
	private const int actionPointsPerPartyAction = 5;
	private const int minimumPartyCombatActions = 1;
	private const int maximumPartyCombatActions = 6;

	private const string combatantTypeDescription = "Party Leader";
	private const string zoiIconBackgroundName = "ZOI-Icon";

	public const int playerLevelMaximum = 20;
	public const int playerActionWheelLength = 8;
	private const int playerHealthPerLevelAboveOne = 10;
	private const int playerBaseHealth = 90;

	public const int statMaximum = 10;
	
	public const int defaultStartingRow = 0;
	public const int defaultStartingCol = 1;

	public int strength { private get; set; }
	public int dexterity { private get; set; }
	public int wisdom { private get; set; }
	public int charisma { private get; set; }

    public CombatActionArray combatActionArray;

    private int level;
	public int xp;

	private int intimidatesRemaining = -1;
	private int cunningsRemaining = -1;
	private int currentlyPlacedPartyMembers = -1;

	public PlayerStats() : base()
	{
        this.combatActionArray = new CombatActionArray(this);
	}

	public PlayerStats(string name, int Str, int Dex, int Wis, int Cha, int lvl, int xp, int cHP, int cunningsRemaining) : base()
	{
		this.name = name;

		this.strength = Str;
		this.dexterity = Dex;
		this.wisdom = Wis;
		this.charisma = Cha;

		this.level = lvl;
		this.xp = xp;
		this.cunningsRemaining = cunningsRemaining;

		this.currentHealth = cHP;

        this.combatActionArray = new CombatActionArray(this);
        setCombatSprite();
	}

	public PlayerStats(string name, int Str, int Dex, int Wis, int Cha) : base()
	{
		this.name = name;

		this.strength = Str;
		this.dexterity = Dex;
		this.wisdom = Wis;
		this.charisma = Cha;

		this.level = 1;
		this.xp = 0;

		this.currentHealth = getTotalHealth(new SecondaryStatBoost[] { });

        this.combatActionArray = new CombatActionArray(this); 
		setCombatSprite();
	}

	public Story addAllStats(Story currentStory)
	{
		if (currentStory.variablesState["playerName"] != null)
		{
			currentStory.variablesState["playerName"] = getName();
		}

		if (currentStory.variablesState["strength"] != null)
		{
			currentStory.variablesState["strength"] = strength;
		}

		if (currentStory.variablesState["dexterity"] != null)
		{
			currentStory.variablesState["dexterity"] = dexterity;
		}

		if (currentStory.variablesState["wisdom"] != null)
		{
			currentStory.variablesState["wisdom"] = wisdom;
		}

		if (currentStory.variablesState["charisma"] != null)
		{
			currentStory.variablesState["charisma"] = charisma;
		}

		return currentStory;
	}

	private int[] getStatsAsArray()
	{
		return new int[] { strength, dexterity, wisdom, charisma };
	}

	public PrimaryStat getHighestStat()
	{
		int[] primaryStats = getStatsAsArray();

		int highestStat = 0;
		int highestStatIndex = 0;
		int currentIndex = 0;

		foreach (int stat in primaryStats)
		{
			if (stat > highestStat)
			{
				highestStat = stat;
				highestStatIndex = currentIndex;
			}

			currentIndex++;
		}

		return (PrimaryStat)highestStatIndex;
	}

	public override int getStrength()
	{
		return strength + EquipmentPropertiesList.getArmorStrengthBonuses();
	}

	public override int getDexterity()
	{
		return dexterity + EquipmentPropertiesList.getArmorDexterityBonuses();
	}

	public override int getWisdom()
	{
		return wisdom + EquipmentPropertiesList.getArmorWisdomBonuses();
	}

	public override int getCharisma()
	{
		return charisma + EquipmentPropertiesList.getArmorCharismaBonuses();
	}
    
    public void incrementStrength()
	{
        strength += 1;
	}

	public void incrementDexterity()
	{
        dexterity += 1;
	}

	public void incrementWisdom()
	{
        wisdom += 1;
	}

	public void incrementCharisma()
	{
        charisma += 1;
	}

	public int getObservationLevel()
    {
        if (getWisdom() < 2)
        {
            return 0;
        }
        else
        {
            return getWisdom() + EquipmentPropertiesList.getArmorObservationLevelBonuses();
        }
    }

    public override AbilityMenuManager getAbilityMenuManager()
    {
        return combatSprite.GetComponent<AbilityMenuManager>();
    }

	public override int getBaseHealth()
	{
		return playerBaseHealth;
	}

	public override int getHealthPerLevelAboveOne()
	{
		return playerHealthPerLevelAboveOne;
	}

	public override int getLevel()
	{
		return level;
	}

	public override void setLevel(int newLevel)
	{
		this.level = newLevel;
	}

	public override void incrementLevel()
	{
		level++;
	}

	public static int calculateTotalHealth(int potentialLevel, int potentialStrength, SecondaryStatBoost[] statBoosts)
	{
		PlayerStats dummyPlayer = new PlayerStats();

		dummyPlayer.level = potentialLevel;
		dummyPlayer.strength = potentialStrength;

		return dummyPlayer.getTotalHealth(statBoosts);
	}

	public int getTotalHealth(SecondaryStatBoost[] statBoosts)
	{
		int healthFromLevel = playerBaseHealth + (playerHealthPerLevelAboveOne * (level - 1));
		int healthFromStrength = Strength.getHealthFromStrength(strength);
		int healthFromEquipment = 0;

		return (healthFromLevel + healthFromStrength + healthFromEquipment + StatBoostManager.getTotalExtraHealth(statBoosts) + EquipmentPropertiesList.getArmorHealthBonuses());
	}

	public override int getTotalHealth()
	{
		int healthFromLevel = playerBaseHealth + (playerHealthPerLevelAboveOne * (level - 1));
		int healthFromStrength = Strength.getHealthFromStrength(strength);
		int healthFromEquipment = 0;

		return (healthFromLevel + healthFromStrength + healthFromEquipment + StatBoostManager.getTotalExtraHealth() + EquipmentPropertiesList.getArmorHealthBonuses());
	}

	public override int getTotalArmorRating()
	{
		int totalArmorRating = 0;

		foreach (EquippableItem item in State.equippedItems)
		{
			if (item == null)
			{
				continue;
			}

			totalArmorRating += item.getArmorRating();
		}

		totalArmorRating += getExtraArmorFromDexterity();

		return (int)((double)totalArmorRating * getCurrentTotalArmorPercentage());
	}

	public override void addEquippedPassiveTraits()
	{
        List<Trait> equippedPassiveTraits = combatActionArray.getAllEquippedPassiveTraits();

		foreach (Trait trait in equippedPassiveTraits)
        {
            if (trait == null)
            {
                continue;
            }

            addTrait(trait);
        }
	}

	public override void removeActivatedPassiveTraits()
	{
		// foreach (CombatAction action in CombatActionArray)
		// {
		// 	if (action == null)
		// 	{
		// 		continue;
		// 	}

		// 	if (action.autoApply())
		// 	{
		// 		Trait[] newTraits = new Trait[0];

		// 		for (int traitIndex = 0; traitIndex < traits.Length; traitIndex++)
		// 		{
		// 			if (!action.getAppliedTrait().Equals(traits[traitIndex]))
		// 			{
		// 				newTraits = Helpers.appendArray<Trait>(newTraits, traits[traitIndex]);
		// 			}
		// 		}

		// 		traits = newTraits;
		// 	}
		// }
	}

	public override bool hasAvailableWeaponSlots()
	{
		return combatActionArray.hasAvailableWeaponSlots();
	}

    public int getMaxIntimidateCount()
    {
        int baseStrCharges;

        if (strength >= SkillManager.skillExtraordinaryLevel)
        {
            baseStrCharges = 4;
        }
        else if (strength >= SkillManager.skillImprovedLevel)
        {
            baseStrCharges = 3;
        }
        else if (strength >= SkillManager.skillUnlockLevel)
        {
            baseStrCharges = 2;
        }
        else
        {
            baseStrCharges = 0;
        }

        if (baseStrCharges == 0)
        {
            return baseStrCharges;
        }
        else
        {
            return baseStrCharges + StatBoostManager.getTotalMaxIntimidateCharges() + EquipmentPropertiesList.getArmorIntimidateChargeBonuses();
        }
    }

	public int getIntimidatesRemaining()
	{

		if (intimidatesRemaining < 0)
		{
			resetIntimidatesRemaining();
		}

		return intimidatesRemaining;

	}

	public void setIntimidatesRemaining(int newIntimidatesRemaining)
	{
		intimidatesRemaining = newIntimidatesRemaining;
	}

	public void incrementIntimidatesRemaining()
	{
		if (intimidatesRemaining + 1 <= getMaxIntimidateCount())
		{
			intimidatesRemaining++;
			OOCUIManager.updateOOCUI();
		}
	}

	public void decrementIntimidatesRemaining()
	{
		if (intimidatesRemaining > 0)
		{
			intimidatesRemaining--;
			OOCUIManager.updateOOCUI();
		}
	}

	public void resetIntimidatesRemaining()
	{
		intimidatesRemaining = getMaxIntimidateCount();

		if (State.oocUIManager != null)
		{
			OOCUIManager.updateOOCUI();
		}

	}

	public int getMaxCunningCount()
	{
		int baseDexCharges;

		if (dexterity >= SkillManager.skillExtraordinaryLevel)
		{
			baseDexCharges = 4;
		}
		else if (dexterity >= SkillManager.skillImprovedLevel)
		{
			baseDexCharges = 3;
		}
		else if (dexterity >= SkillManager.skillUnlockLevel)
		{
			baseDexCharges = 2;
		}
		else
		{
			baseDexCharges = 0;
		}

		if (baseDexCharges == 0)
		{
			return baseDexCharges;
		}
		else
		{
			return baseDexCharges + StatBoostManager.getTotalMaxCunningCharges() + EquipmentPropertiesList.getArmorCunningChargeBonuses();
		}
	}

	public int getCunningsRemaining()
	{
		if (cunningsRemaining < 0)
		{
			resetCunningsRemaining();
		}

		return cunningsRemaining;
	}

	public void setCunningsRemaining(int newCunningsRemaining)
	{
		cunningsRemaining = newCunningsRemaining;
	}

	public void incrementCunningsRemaining()
	{
		if (cunningsRemaining + 1 <= getMaxCunningCount())
		{
			cunningsRemaining++;
			OOCUIManager.updateOOCUI();
		}
	}

	public void decrementCunningsRemaining()
	{
		if (cunningsRemaining > 0)
		{
			cunningsRemaining--;
			OOCUIManager.updateOOCUI();
		}
	}

	public void resetCunningsRemaining()
	{
		cunningsRemaining = getMaxCunningCount();

		if (State.oocUIManager != null)
		{
			OOCUIManager.updateOOCUI();
		}

	}

    public int getMaxPlacablePartyMembers()
    {
        int skillLevelFromCharisma = 0;

        if (charisma >= SkillManager.skillExtraordinaryLevel)
        {
            skillLevelFromCharisma = 3;
        }
        else if (charisma >= SkillManager.skillImprovedLevel)
        {
            skillLevelFromCharisma = 2;
        }
        else if (charisma >= SkillManager.skillUnlockLevel)
        {
            skillLevelFromCharisma = 1;
        }
        else
        {
            return 0;
        }

        return skillLevelFromCharisma + EquipmentPropertiesList.getArmorLeadershipBonuses();
	}

	public override int getWeaponSlots()
	{
        int weaponSlotsFromWisdom = 1;

        if (getWisdom() >= 3 && getWisdom() < 7)
        {
            weaponSlotsFromWisdom = 2;
        }
        else if (getWisdom() >= 7)
        {
            weaponSlotsFromWisdom = Wisdom.maxNumberOfWeaponSlots;
        }

        if ((weaponSlotsFromWisdom + EquipmentPropertiesList.getArmorWeaponSlotBonuses()) > Wisdom.maxNumberOfWeaponSlots)
        {
            return Wisdom.maxNumberOfWeaponSlots;
        }
        else
        {
            return weaponSlotsFromWisdom + EquipmentPropertiesList.getArmorWeaponSlotBonuses();
        }
	}

	public int getMaximumPartyMemberSlots()
	{
		return getMaximumPartyMemberSlots(charisma, level);
	}

	public static int getMaximumPartyMemberSlots(int charisma, int level)
	{
		int numberOfPartyMemberSlots = baseNumberOfPartyMembers;

		numberOfPartyMemberSlots += ((charisma + level) / 2) + EquipmentPropertiesList.getArmorPartySlotsBonuses();

		if (numberOfPartyMemberSlots > maxNumberOfPartyMembers)
		{
			return maxNumberOfPartyMembers;
		}
		else
		{
			return numberOfPartyMemberSlots;
		}
	}

	public int getPartyMemberCombatActionSlots()
	{
		int numberOfPartyMemberCombatActionPoints = baseNumberOfPartyCombatActionPoints;

		numberOfPartyMemberCombatActionPoints += level;

		numberOfPartyMemberCombatActionPoints += charisma;

		int partyMemberCombatActions = (numberOfPartyMemberCombatActionPoints / actionPointsPerPartyAction) + EquipmentPropertiesList.getArmorPartyActionsBonuses();

		if (minimumPartyCombatActions > partyMemberCombatActions)
		{
			return minimumPartyCombatActions;
		}
		else if (partyMemberCombatActions <= maximumPartyCombatActions)
		{
			return partyMemberCombatActions;
		}
		else
		{
			return maximumPartyCombatActions;
		}
	}

	public int getNumberOfSurpriseRounds()
	{
		if (dexterity >= Dexterity.extraSurpriseRoundLevel)
		{
			return 2 + EquipmentPropertiesList.getArmorSurpriseRoundsBonuses();
		}
		else
		{
			return 1 + EquipmentPropertiesList.getArmorSurpriseRoundsBonuses();
		}
	}

	public override int getExtraArmorFromDexterity()
	{
		return (getDexterity() * Dexterity.extraArmorMultiplier) + StatBoostManager.getTotalExtraArmor();
	}

	public void setCombatSprite()
	{
		combatSpriteName = playerCombatSpriteName; //will need to change later when implementing choosing your sprite
        combatSprite = Resources.Load<GameObject>(playerCombatSpriteName);
	}

	public void implementNewStats(int[] newStats)
	{
		strength = newStats[0];
		dexterity = newStats[1];
		wisdom = newStats[2];
		charisma = newStats[3];
	}

	//coefficient used when determining affinity per monster slain
	public int getAffinityCoefficient()
	{
		if (charisma >= 10)
		{
			return 50 + EquipmentPropertiesList.getArmorAffinityCoefficientBonuses();
		}
		else
		{
			return 6 + (charisma * 4) + EquipmentPropertiesList.getArmorAffinityCoefficientBonuses();
		}
	}

	//cost coefficient used in calculating the price of objects
	public float getCostCoefficient()
	{
		if (charisma == 10)
		{
			return 2f;
		}

		return (3.1f - ((float)charisma * .1f));
	}

	//gets the size of the discount offered by your charisma for displaying with stats 
	public string getDiscountForDisplay()
	{
		double baseDiscount = 0.0;

		if (charisma == 1)
		{
			baseDiscount = 0.0;
		}
		else if (charisma < 10)
		{
			baseDiscount = Math.Round(((((((double)charisma) - 1.0) / 10.0) / 3.0) * 100.0), 2);
		}
		else
		{
			baseDiscount = 33.33;
		}

		return (baseDiscount + StatBoostManager.getTotalDiscount()) + "%";
	}

	public int getMaximumRepositionsPerCombat()
	{
		if (wisdom < Wisdom.oneRepositionLevel)
		{
			return 0;
		}
		else if (wisdom < Wisdom.twoRepositionLevel)
		{
			return 1;
		}
		else if (wisdom < Wisdom.threeRepositionLevel)
		{
			return 2;
		}
		else if (wisdom < Wisdom.fourRepositionLevel)
		{
			return 3;
		}
		else if (wisdom < Wisdom.fiveRepositionLevel)
		{
			return 4;
		}
		else
		{
			return 5;
		}
	}

	public int getRetreatChanceBonus()
	{
		return (getDexterity() * Dexterity.retreatChancePerDexterity) + StatBoostManager.getTotalRetreatChance() + EquipmentPropertiesList.getArmorRetreatChanceBonuses();
	}

	public string getRetreatChanceBonusForDisplay()
	{
		return ((getDexterity() * Dexterity.retreatChancePerDexterity) + StatBoostManager.getTotalRetreatChance() + (int) Math.Round(100f*Dexterity.baseRetreatChance)) + EquipmentPropertiesList.getArmorRetreatChanceBonuses() + "%";
	}

	public void addXP(string earnedXP)
	{
		addXP(int.Parse(earnedXP));
	}

	public void addXP(int earnedXP)
	{
		xp += earnedXP;

		// if (xp >= xpNeededToLevelUp && level < getLevelMaximum())
		// {
		// 	OverallUIManager.levelUpPopUpButton.spawnPopUp();
		// }
	}

	public void removeXPFromLevelUp()
	{
		xp = xp % xpNeededToLevelUp;
	}
    
    public void removeXPFromLevelUpOnce()
	{
		xp -= xpNeededToLevelUp;
	}

	public int getLevelUpsAvailable()
    {
        return xp / xpNeededToLevelUp;
    }

	public override int getLevelMaximum()
	{
		return playerLevelMaximum;
	}

	public override bool removableFromFormation()
	{
		return false;
	}

	public override bool costsPlayerCombatActions()
	{
		return true;
	}

	public override bool costsPartyCombatActions()
	{
		return false;
	}

	public override Trait getZoneOfInfluenceTrait()
	{
		string[] allStatBoostKeys = Stats.getAllZoneOfInfluenceBoostKeys(Helpers.appendArray<string>(State.lessonsLearned, getAllStatBoostKeysFromTraits()));
		string[] zoiStatBoostKeys = new string[0];

		foreach (string statBoostKey in allStatBoostKeys)
		{
			SecondaryStatBoost boost = StatBoostList.getStatBoost(statBoostKey);

			if (boost.affectsZone && boost.sourceName.Equals(getName()) || boost.sourceName.Equals(""))
			{
				zoiStatBoostKeys = Helpers.appendArray<string>(zoiStatBoostKeys, statBoostKey);
			}
		}

		return new ZoneOfInfluenceTrait(getName() + zoiTraitName, zoiTraitDescription, zoiIconBackgroundName, zoiStatBoostKeys);
	}

	private string[] getAllZoneOfInfluenceBoostKeys()
	{
		string[] boostKeys = new string[0];

		foreach (string boostKey in State.lessonsLearned)
		{
			SecondaryStatBoost statBoost = StatBoostList.getStatBoost(boostKey);

			if (statBoost != null && statBoost.affectsZone)
			{
				boostKeys = Helpers.appendArray<string>(boostKeys, boostKey);
			}
		}

		return boostKeys;
	}

	public override Color getSpriteColor()
	{
		return Color.white;
	}

	public override CombatActionArray getActionArray()
	{
		return combatActionArray;
	}

	public override string getBonusCritChanceFromArmor()
	{
		return "" + EquipmentPropertiesList.getArmorCritChanceBonuses();
	}

	public override float getDevastatingCriticalPercentage()
	{
		if (hasTrait(TraitList.devastatingCriticals) < 0)
		{
			return 0f;
		}

		float devastatingCriticalPercentage = (float)dexterity / 100f;

		if (CombatStateManager.isPlayerSurpriseRound())
		{
			return devastatingCriticalPercentage;
		}
		else
		{
			return devastatingCriticalPercentage * 2f;
		}
	}

    public override int getSynergyCoefficient()
    {
        return Charisma.playerSynergyModifierCoefficient;
    }

    public override int getBonusAbilityDamage()
    {
        return combatActionArray.calculateBonusAbilityDamage() + EquipmentPropertiesList.getArmorDamageBonuses();
    }

    public override int getPassiveSlotsUnlocked()
    {
        int passivesUnlockedFromWisdom = 1;

        switch (wisdom)
        {
            case >= Wisdom.thirdPassiveSlotUnlockLevel:
                passivesUnlockedFromWisdom = 4;
                break;
            case >= Wisdom.secondPassiveSlotUnlockLevel:
                passivesUnlockedFromWisdom = 3;
                break;
            case >= Wisdom.firstPassiveSlotUnlockLevel:
                passivesUnlockedFromWisdom = 2;
                break;
        }

        return passivesUnlockedFromWisdom + EquipmentPropertiesList.getArmorPassiveSlotBonuses();
	}

	public override IDescribable getHoverPanelDescribable()
	{
		return EquippedItems.getOffHand();

		/* for testing description panels
		CombatAction action = AbilityList.statAbilityDictionary["d-3-2"].clone();
		
		action.setActorCoords(State.playerStats.position);
		
		return action;*/

	}

	public static PrimaryStat convertStringToPrimaryStat(string statName)
	{
		switch (statName)
		{
			case "Strength":
				return PrimaryStat.Strength;
			case "Dexterity":
				return PrimaryStat.Dexterity;
			case "Wisdom":
				return PrimaryStat.Wisdom;
			case "Charisma":
				return PrimaryStat.Charisma;
			default:
				return PrimaryStat.None;
		}
	}

	public bool meetsStatRequirements(PrimaryStat statType, int statLevel)
	{
		switch (statType)
		{
			case PrimaryStat.Strength:

				return strength >= statLevel;

			case PrimaryStat.Dexterity:

				return dexterity >= statLevel;

			case PrimaryStat.Wisdom:

				return wisdom >= statLevel;

			case PrimaryStat.Charisma:

				return charisma >= statLevel;

			default:
				return true;
		}
	}

	public List<PrimaryStat> getHighestPrimaryStats()
	{
		int[] allPrimaryStats = new int[] { strength, dexterity, wisdom, charisma };
		List<PrimaryStat> highestStats = new List<PrimaryStat>();

		int highestStatLvl = allPrimaryStats.Max(x => x);

		if (strength >= highestStatLvl)
		{
			highestStats.Add(PrimaryStat.Strength);
		}

		if (dexterity >= highestStatLvl)
		{
			highestStats.Add(PrimaryStat.Dexterity);
		}

		if (wisdom >= highestStatLvl)
		{
			highestStats.Add(PrimaryStat.Wisdom);
		}

		if (charisma >= highestStatLvl)
		{
			highestStats.Add(PrimaryStat.Charisma);
		}

		if (highestStatLvl <= 1)
		{
			//Debug.LogError("No primary stats are above 1");
			return new List<PrimaryStat>() { PrimaryStat.None };
		}
		if (highestStats.Count >= 4)
		{
			//Debug.LogError("All primary stats are at the same level");
			return new List<PrimaryStat>() { PrimaryStat.None };
		}

		return highestStats;
	}

	//IDescribable methods

	public override void describeSelfFull(DescriptionPanel panel)
	{
		base.describeSelfFull(panel);

		DescriptionPanel.setText(panel.typeText, combatantTypeDescription);
	}

	public override List<DescriptionPanelBuildingBlock> getDescriptionBuildingBlocks()
	{

        List<DescriptionPanelBuildingBlock> buildingBlocks = new List<DescriptionPanelBuildingBlock>();

        if (!CombatStateManager.inCombat)
        {
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getIntimidateBlock(getMaxIntimidateCount().ToString()));
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getCunningBlock(getMaxCunningCount().ToString()));
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getObservationBlock(getObservationLevel().ToString()));
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getLeadershipBlock(getMaxPlacablePartyMembers().ToString()));
        }

        buildingBlocks.Add(DescriptionPanelBuildingBlock.getBonusDamageBlock(getBonusAbilityDamage().ToString())); 

        buildingBlocks.Add(DescriptionPanelBuildingBlock.getPartyActionsBlock(getPartyMemberCombatActionSlots().ToString()));

        buildingBlocks.Add(DescriptionPanelBuildingBlock.getPartySlotsBlock(getMaximumPartyMemberSlots().ToString()));

        buildingBlocks.Add(DescriptionPanelBuildingBlock.getSurpriseRoundAmountBlock(getNumberOfSurpriseRounds().ToString()));

        buildingBlocks.AddRange(base.getDescriptionBuildingBlocks());

        // buildingBlocks.Add(DescriptionPanelBuildingBlock.getRegenBlock(Strength.getCurrentRegenerationAmount().ToString()));

		// buildingBlocks.Add(DescriptionPanelBuildingBlock.getAffinityMultiplierBlock((State.playerStats.getAffinityCoefficient() * 
		// 					 (PartyManager.getCurrentPartyMemberSlotsUsed()-1)).ToString()));

		buildingBlocks.Add(DescriptionPanelBuildingBlock.getRetreatChanceBlock(getRetreatChanceBonusForDisplay()));

        if (!CombatStateManager.inCombat)
        {
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getExperienceBlock(xp.ToString()));
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getAffinityTotalBlock(AffinityManager.getTotalAffinity().ToString()));
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getWorthBlock(Purse.getCoinsInPurse().ToString()));
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getPassiveSlotsBlock(getPassiveSlotsUnlocked().ToString()));
            buildingBlocks.Add(DescriptionPanelBuildingBlock.getBonusWeaponSlotsBlock((getWeaponSlots() - 1).ToString()));
        }

        // buildingBlocks.Add(new DescriptionPanelBuildingBlock(DescriptionPanelBuildingBlockType.Icon, getZoneOfInfluenceTrait().getIconName()));

        return buildingBlocks;
	}
}
